import { nanoid } from "nanoid"

export default [
    {
        id: nanoid(),
        title: "Quizzical",
        subtitle: "React Project",
        img: "quizzical-project.png",
        altText: "Screenshot of Quizzical",
        skills: ["React", "responsive", "mobile-first", "API HTTP requests", "interpreting documentation"],
        linkText: "Click the link to try the quiz",
        siteUrl: "https://lambent-puffpuff-17b13f.netlify.app/",
        gitHubRepoUrl: "https://github.com/FrancesHitchcock/Quizzical",
        description: (<><p>This was a brainteaser of a React project (for the developer, not just the player), and this was borne out by many posts on the Scrimba Discord channel for this module. This quizz app calls on the Open Trivia Database API for question and answer data. The JavaScript then selects aspects of this data to produce an array of question objects, each with four anwers, one of which is marked as correct using a boolean.</p><p>Most of the state variables and main functionality is situated in the top &lt;App /&gt; component and drilled down to the consuming components via props. The hardest part was setting the questionData state within the selectAnswer() function, as this involved passing the function down the tree where it is realised as a callback function and receives two id parameters - one for the question attempted and one for the selected answer. The state array is updated within the function using a map() within a map().</p><p>The app provides the user with three difficulty levels which they choose from using a select box in the &lt;Start /&gt; component. The value is then added to the http request as a query parameter. Additional functionality includes all three incorrect answers highlighted in red for a question where the user has not selected any answer.</p><p>Potential improvements include the addition of a "chosen subject" select box and corresponding query parameter.</p></>),
    },
    {
        id: nanoid(),
        title: "Connect 4",
        subtitle: "Javascript Project",
        img: "connect4-project.png",
        altText: "Screenshot of Connect 4",
        skills: ["Modular JavaScript", "JavaScript logic", "code re-use"],
        linkText: "Click the link to play Connect 4",
        siteUrl: "https://earnest-vacherin-8d15ef.netlify.app/",
        gitHubRepoUrl: "https://github.com/FrancesHitchcock/Connect4Game",
        description: (<><p>Based on the traditional family game, this project was a great opportunity to devise a comprehensive algorithm that checked every square in a grid to see if it was held, and if so to check each horizontal, vertical and diagonal line starting at the occupied square to see if the first four (or selected winning line length) were held by the same player.</p><p>The grid was constructed using a for loop within a for loop to create a 2-dimensional matrix. The grid dimensions were set using the JavaScript style property in combination with CSS grid to make the game size flexible according to the user's selected dimensions. The user experience is enhanced with a token-drop effect produced by the disc appearing briefly in each square when the token is "dropped". This effect is handled by the dropDisc() function, and I was delighted to get it working! I used a setTimeout() within a for loop, incrementing the setTimeout() interval on each iteration.</p><p>The project focuses on JavaScript logic, and has minimal responsiveness. Opportunities for improvement include styling the app to suit a mobile phone screen, introducing code to indicate which is the winning line of tokens, and adding functionality to allow a single player to play against the computer, with the computer dropping tokens randomly. </p><p>I learnt a lot about JavaScript from this project, including what happens when you try and get it to evaluate array items that lie outside the matrix!</p></>),
    },
    {
        id: nanoid(),
        title: "Movie Watchlist",
        subtitle: "RESTful API Project",
        img: "movie-watchlist-project.png",
        altText: "Screenshot of Movie Watchlist",
        skills: ["JavaScript", "dynamic rendering", "responsive", "mobile-first", "API HTTP requests", "interpreting documentation"],
        linkText: "Click the link to make your own watchlist",
        siteUrl: "https://strong-pony-c8b7fc.netlify.app/",
        gitHubRepoUrl: "https://github.com/FrancesHitchcock/MovieWatchlist",
        description: (<><p>One of my favourite projects - it has a real world application and the Figma design spec really looks good - though I did have to adapt the layout to display nicely on a mobile screen. The app consists of two pages: the first is a search page, consisting of a search bar for the user to input a movie title or part of a title, and area for rendering movies that result from the search. Each rendered movie has a button to click for the user to save the movie to the watchlist; the second page is the watchlist page and displays the user's selected movies. Movies can be deleted from the watchlist by clicking the button in the watchlist page. Local storage is used to store the watchlist between sessions, and before navigating away from each page.</p><p>There are three JavaScript files: one for each html file and a third containing shared functions.</p><p>There were some really interesting challenges here. For example, the search term used as the Url parameter only retrieved part of the required data, so an array of movie ids was created from the first fetch request, and a further fetch request made for each item in the movie id array using the forEach() method. To avoid multiple renders the renderMovies() function was only called on the last iteration.</p><p>User experience is enhanced by using session storage to "retain" the movies list on the search page when the user returns there from the watchlist page. This project was undertaken before the React module, but would lend itself very well to a React application.</p></>),
    },
    {
        id: nanoid(),
        title: "Learning Journal",
        subtitle: "HTML & CSS Project",
        img: "learning-journal.png",
        altText: "Screenshot of Learning Journal",
        skills: ["HTML & CSS", "dynamic rendering", "responsive", "mobile-first"],
        linkText: "Click the link to see the journal",
        siteUrl: "https://celadon-lolly-4cacd7.netlify.app/index.html",
        gitHubRepoUrl: "https://github.com/FrancesHitchcock/LearningJournal",
        description: (<><p>The leaning objectives associated with this project focussed on responsive design, including flexbox and layout. But it also contains a considerable amount of JavaScript which was needed to undertake the stretch goals. The style and layout were determined by a Figma design, and most of the images were downloaded from the Figma file.</p><p>I really enjoyed the challenge of creating the "view more / view less" functionality with JavaScript, and it was hugely satisfying to render the blog cards dynamically from a data array.</p><p>I also appreciated the opportunity to make a study plan for the remaining modules in the Scrimba Frontend Pathway.</p></>),
    },
    {
        id: nanoid(),
        title: "Festive Game",
        subtitle: "Self-Directed Project",
        img: "festive-game.png",
        altText: "Screenshot of Festive Game",
        skills: ["JavaScript logic", "HTML & CSS", "constructor functions"],
        linkText: "Click the link to play the game",
        siteUrl: "https://amazing-florentine-7bf52d.netlify.app/",
        gitHubRepoUrl: "https://github.com/FrancesHitchcock/RolePlayingGame",
        description: (<><p>I invented this game to practise using JavaScript constructor functions, and had great fun inventing festive characters for Santa to meet on his journey! The game could be developed and adapted to suit different festival characters.</p><p>The app is aimed primarily at mobile devices, and it took considerable adjustment to ensure the whole page is visible on a mobile screen without having to scroll, and without compromising usability or aesthetics. It does fall short of this objective slightly on smaller mobile screens, and the UI could be compacted further to suit this type of mobile.</p><p>I am especially happy with the dice-roll effect, as I built the code myself from scratch. It can be found in the utils.js file. My approach was to create a separate program and start with a single dice, iterating through each number randomly before displaying the final value using the getEachDiceRoll() function. I then added multiple dice and staggered the start-time slightly, using the getDiceSetRoll() function which called getEachDiceRoll() however many times there are dice. As I did not succeed in incorporating the dice roll functionality into the app code retrospectively I rewrote the main program from scratch so I could include it.</p><p>One of my major takeaways from this project was overcoming some of the complications and limitations of setTimeout().</p></>),
    },
    {
        id: nanoid(),
        title: "Tindog",
        subtitle: "JavaScript Project",
        img: "tindog.png",
        altText: "Screenshot of Tindog",
        skills: ["JavaScript logic", "modular JS", "HTML & CSS", "classes"],
        linkText: "Click the link to choose your dogs",
        siteUrl: "https://clinquant-torte-7ac531.netlify.app/",
        gitHubRepoUrl: "https://github.com/FrancesHitchcock/Tindog",
        description: (<><p>A short and sweet project to demonstrate understanding of JavaScript classes. It is a take on the Tinder dating app, but with a canine focus. The style and layout was determined by a Figma design spec, and the photos were downloaded from the Figma file. The user is presented with a selection of dog images from an array of objects, and can either like them with the heart button or reject them with the cross icon. The user's choice for each dog object is stored in a boolean, and the "swiped" status for each is stored in another boolean. </p><p>I also added functionality so the user is played back their choices once all the dogs have been swiped. To enhance user experience I incorporated conditional statements into the endSession() function so the playback sentence is gramatically correct with commas and "and" in the correct positions.</p></>),
    },
    {
        id: nanoid(),
        title: "React Notes",
        subtitle: "Self-Directed Project",
        img: "react-notes.png",
        altText: "Screenshot of React Notes",
        skills: ["React", "responsive", "mobile-first", "HTML & CSS", "React plugins"],
        linkText: "Click the link to learn React",
        siteUrl: "https://legendary-beignet-64129a.netlify.app/",
        gitHubRepoUrl: "https://github.com/FrancesHitchcock/ReactNotes",
        description: (<><p>I'm hugely proud of this app, and consider it one of my major achievements so far! I undertook it at the end of the Scrimba React Basics module, and it is entirely my own idea and creation. The project serves a dual purpose: firstly as a useful reference guide to the basic React concepts and syntax; and secondly as a medium to practise those very concepts (I even referred to it while I was building it.) </p><p>The app consists of two pages: a Contents list and a Details page. When the user selects an item in the Contents list, the explanation of that item is rendered in the details page. In the mobile version the pages render separately - either Contents or Details, whereas in the large screen version the two pages render side by side using the Split plugin. The biggest challenge was working out how to maintain the scroll height in the Details page after an item has been selected. This was made even more complicated because it required different methods for the small and large screens. It took a lot of experimentation, but I got there in the end. Since completing this app I've discovered that it's possible to render a data object property with JSX as an alternative to a string, which would have made each data object body text easier to handle and eliminate the need for the dangerouslySetInnerHTML property.</p><p>The light / dark mode was adopted from a Scrimba code-along example, as was the use of the React Split plugin. To enhance user experience I added a CSS keyframes animation to achieve a soft fade-in effect for the text.</p><p>The app was very well received by other students on the Scrimba Discord server.</p></>),
    },
]